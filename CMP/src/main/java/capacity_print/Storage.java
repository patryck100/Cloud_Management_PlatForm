// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capacity.proto

package capacity_print;

/**
 * <pre>
 *Those are the 3 sizes of storage availible to the client.
 *The size is set to Basic automatically if the client does not choose a different size.
 * </pre>
 *
 * Protobuf enum {@code capacity.Storage}
 */
public enum Storage
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *default size
   * </pre>
   *
   * <code>BASIC = 0;</code>
   */
  BASIC(0),
  /**
   * <pre>
   *double the basic size
   * </pre>
   *
   * <code>SILVER = 1;</code>
   */
  SILVER(1),
  /**
   * <pre>
   * double the Silver size
   * </pre>
   *
   * <code>GOLD = 2;</code>
   */
  GOLD(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *default size
   * </pre>
   *
   * <code>BASIC = 0;</code>
   */
  public static final int BASIC_VALUE = 0;
  /**
   * <pre>
   *double the basic size
   * </pre>
   *
   * <code>SILVER = 1;</code>
   */
  public static final int SILVER_VALUE = 1;
  /**
   * <pre>
   * double the Silver size
   * </pre>
   *
   * <code>GOLD = 2;</code>
   */
  public static final int GOLD_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Storage valueOf(int value) {
    return forNumber(value);
  }

  public static Storage forNumber(int value) {
    switch (value) {
      case 0: return BASIC;
      case 1: return SILVER;
      case 2: return GOLD;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Storage>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Storage> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Storage>() {
          public Storage findValueByNumber(int number) {
            return Storage.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return capacity_print.capacityImpl.getDescriptor().getEnumTypes().get(0);
  }

  private static final Storage[] VALUES = values();

  public static Storage valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Storage(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:capacity.Storage)
}

